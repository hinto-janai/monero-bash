#!/usr/bin/env bash

# installDirectory = where ever /monero-bash/ is
scriptPath="$(realpath $0)"
installDirectory="$(dirname "$scriptPath")"

# check if script is in monero-bash folder
if [[ $installDirectory != *"/monero-bash" ]]; then
	printf "\033[1;31mExecuting monero-bash while it isn't in the /monero-bash/ folder is DANGEROUS\n"
	printf "\033[0;31mExiting for safety...\n"
	exit
fi

# source files, exit on failure
cd "$installDirectory"
source "$installDirectory/src/source"
[[ $? != "0" ]]&& printf "\033[1;31mMONERO BASH: SOURCING ERROR\n" && exit
case true in
	$varMissing) printf "\033[1;31mMONERO BASH: Variables not sourced\n" ;exit;;
	$funcMissing) printf "\033[1;31mMONERO BASH: Functions not sourced\n" ;exit;;
	$stateMissing) printf "\033[1;31mMONERO BASH: state file missing\n" ;exit;;
	$debugMissing) printf "\033[1;31mMONERO BASH: debug file missing\n" ;exit;;
	$hashlistMissing) printf "\033[1;31mMONERO BASH: hashlist file missing\n" ;exit;;
esac

# DEBUG COMMAND - read /src/debug for more info
if [[ $1 = "DEBUG_04e3be9" ]]; then
	case $2 in
		"") DEBUG_04e3be9 ;;
		*) "$2" ;;
	esac
	exit
fi

# safety checks
safety_Root
safety_Deps
safety_LinuxFolders
safety_Home

# Installation
if [[ $FIRST_TIME = "true" ]]; then
	monerobash_Install
	exit
fi

# even more safety checks
if [[ $FIRST_TIME != "true" ]]; then
	safety_UsrLocalShare
	safety_User
	safety_DotMoneroBash
	missing_Wallets
	missing_config_Folder
	missing_config_All
	missing_systemd_All
fi

# interactive/option check
[[ $1 = "" ]]&& interactive="true"
[[ $1 != "" ]]&& options="true"

# Interactive Wallet Selection
if [[ $interactive = "true" ]]; then
	print_MoneroBashTitle
	if [[ $AUTO_UPDATE = "true" ]]; then
		update_All
		echo
	fi

	# SHOW WALLETS, SELECT
	$white; wallet_Count ; wallet_List
	while true ;do
		$iblue; printf "Select wallet "
		$white; printf "or "
		$ired; printf "[new / view / recover]"
		$white; printf ": "
		read walletSelection

		for i in ${walletList[*]}; do
			# IF WALLET NAME COLLIDES WITH OPTION, ASK FOR CLARIFICATION
			if [[ $walletSelection = $i && $walletSelection = "new" \
				|| $walletSelection = $i && $walletSelection = "view" \
				|| $walletSelection = $i && $walletSelection = "recover" ]]; then
					wallet_Collision
			# ELSE, START WALLET NORMALLY IF IT EXISTS
			elif [[ $walletSelection = $i ]]; then
				$white; printf "Password: "
				read -s walletPassword && echo
				wallet_Start
				exit 0
			fi
		done

		# WALLET CREATION + ERROR INPUT
		case $walletSelection in
			new|New|NEW|"[new]"|"[New]") wallet_Create ; break ;;
			view|View|VIEW|view-only|View-only|View-Only) wallet_View ; break ;;
			recover|Recover|RECOVER|"[recover]"|"[Recover]") wallet_Recover ; break ;;
			"") print_Error "empty input" ;;
			*) $ired; print_Error "wallet does not exist" ;;
		esac
	done
	exit
fi

# Option Flags
if [[ $options = "true" ]]; then
	case $1 in
		backup) backup_Wallets ;;
		decrypt) backup_Decrypt ;;
		uninstall) monerobash_Uninstall ;;
		update) update_All ;;
		version) print_Version ;;
		list) print_MoneroBashTitle && wallet_Count && wallet_List ;;
		size) print_Size ;;
		price) check_Price ;;
		status) status_All ;;
		integrity) CHECK_HASH_LIST ;;
		help) print_Usage ;;
		config) mine_Config ;;
		rpc)
			if [[ $2 != "" ]]; then
				shift
				rpc_Daemon "$@"
			else
				print_rpc_Usage
			fi
			;;
		seed)
			[[ $2 != "" ]]&& seedOptions="true" && seedLanguage="$2"
			seed_Create
			;;
		edit)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero;systemd_Edit ;;
				*"xmr"*) define_XMRig;systemd_Edit ;;
				*"p2p"*) define_P2Pool;systemd_Edit ;;
				*) print_Error "Pick: <daemon/p2pool/xmrig>" ;;
			esac
			;;
		reset)
			case $2 in
				*"bash"*)define_MoneroBash;reset_Template ;;
				*"daemon"*|*"monero"*) define_Monero;reset_Template ;;
				*"xmr"*) define_XMRig;reset_Template ;;
				*"p2p"*) define_P2Pool;reset_Template ;;
				*) print_Error "Pick: <bash/daemon/p2pool/xmrig>" ;;
			esac
			;;
		start)
			shift
			case "$*" in
				*"daemon"*|*"monero"*) define_Monero;process_Start ;;
				*"xmr"*) define_XMRig;process_Start ;;
				*"p2p"*) define_P2Pool;process_Start ;;
				all) mine_Start ;;
				*) print_Error "Pick: <all/daemon/p2pool/xmrig>" ;;
			esac
			;;
		stop)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero;process_Stop ;;
				*"xmr"*) define_XMRig;process_Stop ;;
				*"p2p"*) define_P2Pool;process_Stop ;;
				all) mine_Stop ;;
				*) print_Error "Pick: <all/daemon/p2pool/xmrig>" ;;
			esac
			;;
		restart)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero;process_Restart ;;
				*"xmr"*) define_XMRig;process_Restart ;;
				*"p2p"*) define_P2Pool;process_Restart ;;
				all) mine_Restart ;;
				*) print_Error "Pick: <all/daemon/p2pool/xmrig>" ;;
			esac
			;;
		kill)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero;process_Kill ;;
				*"xmr"*) define_XMRig;process_Kill ;;
				*"p2p"*) define_P2Pool;process_Kill ;;
				all) mine_Kill ;;
				*) print_Error "Pick: <all/daemon/p2pool/xmrig>" ;;
			esac
			;;
		full)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero;process_Full ;;
				*"xmr"*) define_XMRig;process_Full ;;
				*"p2p"*) define_P2Pool;process_Full ;;
				*) print_Error "Pick: <daemon/xmrig/p2pool>" ;;
			esac
			;;
		watch)
			case $2 in
				*"daemon"*|*"monero"*) watch_Monero ;;
				*"xmr"*) watch_XMRig ;;
				*"p2p"*) watch_P2Pool ;;
				*) print_Error "Pick: <daemon/xmrig/p2pool>" ;;
			esac
			;;
		upgrade)
			[[ $* = *"verbose"* ]]&& VERBOSE="true" &&$iblue&& echo "Verbosely upgrading...!" ;$off
			[[ $* = *"force"* ]]&& FORCE_UPGRADE="true" &&$ired&& echo "Forcefully upgrading...!" ;$off
			case $2 in
				*"bash"*)
					$bwhite; echo -n "Upgrade [monero-bash]? (Y/n) " ;$off
					Yes(){ upgrade_MoneroBash ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*"daemon"*|*"monero"*|*"Monero"*)
					$bwhite; echo -n "Upgrade [Monero]? (Y/n) " ;$off
					Yes(){ upgrade_Monero ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*"xmr"*|*"Xmr"*|*"XMR"*)
					$bwhite; echo -n "Upgrade [XMRig]? (Y/n) " ;$off
					Yes(){ upgrade_XMRig ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*"p2p"*|*"P2P"*|*"P2p"*)
					$bwhite; echo -n "Upgrade [P2Pool]? (Y/n) " ;$off
					Yes(){ upgrade_P2Pool ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				""|all|All|ALL)
					if [[ $FORCE_UPGRADE = "true" ]]; then
						upgrade_Force
					else
						print_Upgrade
						$bwhite; echo -n "Upgrade? (Y/n) " ;$off
						Yes(){ upgrade_All ;}
						No(){ echo "Exiting..." ;exit;}
						prompt_YESno
					fi
					;;
				*)
					print_Error "Pick a package or <all>"
					print_Version
					;;
			esac
			;;
		install)
			[[ $* = *"verbose"* ]]&& VERBOSE="true" &&$iblue&& echo "Verbosely installing...!" ;$off
			case $2 in
				*"bash"*|*"Bash"*|*"BASH"*)
					$bwhite; echo -n "Install [monero-bash]? (Y/n) " ;$off
					Yes(){ echo "Umm... It's already installed..." ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				monero|Monero|MONERO)
					$bwhite; echo -n "Install [Monero]? (Y/n) " ;$off
					Yes(){ install_Monero ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				xmrig|XMRig|XMRIG|Xmrig|xmr|Xmr)
					$bwhite; echo -n "Install [XMRig]? (Y/n) " ;$off
					Yes(){ install_XMRig ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*"p2p"*|*"P2P"*|*"P2p"*)
					$bwhite; echo -n "Install [P2Pool]? (Y/n) " ;$off
					Yes(){ install_P2Pool ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				all|All|ALL)
					print_Install
					$bwhite; echo -n "Install? (Y/n) " ;$off
					Yes(){ install_All ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*)
					print_Error "Pick a package or <all>"
					print_Version
					;;
			esac
			;;
		remove)
			case $2 in
				*"bash"*|*"Bash"*|*"BASH"*)
					$bwhite; echo -n "Remove [monero-bash]? (Y/n) " ;$off
					Yes(){ remove_MoneroBash ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				monero|Monero|MONERO)
					$bwhite; echo -n "Remove [Monero]? (Y/n) " ;$off
					Yes(){ remove_Monero ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				xmrig|XMRig|XMRIG|Xmrig|xmr|Xmr)
					$bwhite; echo -n "Remove [XMRig]? (Y/n) " ;$off
					Yes(){ remove_XMRig ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*"p2p"*|*"P2P"*|*"P2p"*)
					$bwhite; echo -n "Remove [P2Pool]? (Y/n) " ;$off
					Yes(){ remove_P2Pool ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				all|All|ALL)
					print_Remove
					$bwhite; echo -n "Remove? (Y/n) " ;$off
					Yes(){ remove_All ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*)
				print_Error "Pick a package or <all>"
				print_Version
				;;
			esac
			;;
		*)
			$ired; echo "monero-bash: invalid option!"
			$white; echo -n "for help, type: "
			$bred; echo "monero-bash help"
	esac
	exit
fi

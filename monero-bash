#!/usr/bin/env bash
#
# monero-bash - a wrapper for Monero written in Bash
#
# Copyright (c) 2022 hinto.janaiyo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Parts of this project are originally:
# Copyright (c) 2019-2022, jtgrassie
# Copyright (c) 2014-2022, The Monero Project


# This is the [main] script for [monero-bash].
# It REQUIRES and takes a lot of safety precautions
# to make sure everything found in `src` exists.

# | File/Folder   | Purpose                                    |
# |---------------|--------------------------------------------|
# | src/func/     | all the functions [monero-bash] uses       |
# | src/txt/      | text files to store long-term on disk      |
# | src/source.sh | master source file that sources everything |
# | src/debug.sh  | debugging functions                        |
# | src/var.sh    | frequently used GLOBAL variables           |

# [monero-bash] order of operations
# ---------------------------------
# 1. User inputs [monero-bash <something>]
# 2. [monero-bash] sources -> [src/source.sh]
# 3. [source.sh] sources -> EVERYTHING (functions, state, user config, etc)
# 4. A whole bunch of safety checks
# 5. Parse & execute user input (update, wallet, etc)

# 2022-08-14 [v1.8.0]
# -------------------
# There's a lot of baggage and bad code/design
# in [monero-bash] for backwards compatibility.
# You can still install [monero-bash v1.0.0] and
# upgrade directly to the latest version...!
#
# But it's also because I didn't think ahead.
# Stuff like:
#     - confusing paths
#     - bad function names
#     - bad variable names
#     - over-complicated functions
#     - files being un-upgradable (state/configs)
#
# Since [v2.0.0] is planned to be a hard-fork
# and incompatible with [v1.x.x] versions, I'll
# just continue to maintain and expand on the
# bad [v1.x.x] code instead of rebuilding it all.
# That's what [v2.0.0] will be for :)

#-------------------------------------------------------------------------------------------- BEGIN MAIN
# installDirectory = whereever /monero-bash/ is
scriptPath="$(realpath $0)"
installDirectory="$(dirname "$scriptPath")"

# Check if script is in [monero-bash] folder
if [[ $installDirectory != *"/monero-bash" ]]; then
	printf "\033[1;31mExecuting monero-bash while it isn't in the /monero-bash/ folder is DANGEROUS\n"
	printf "\033[0;31mExiting for safety...\n"
	exit
fi

# Make the root reference folder [/usr/local/share/monero-bash]
cd "$installDirectory"

# Source files, exit on failure
if ! source "$installDirectory/src/source.sh"; then
	printf "\033[1;31mMONERO BASH: SOURCING ERROR\n"
	exit 1
fi

# Exit on any source failure
case true in
	$varMissing) printf "\033[1;31mMONERO BASH: Variables not sourced\n"; exit 1;;
	$funcMissing) printf "\033[1;31mMONERO BASH: Functions not sourced\n"; exit 1;;
	$stateMissing) printf "\033[1;31mMONERO BASH: state file missing\n"; exit 1;;
	$debugMissing) printf "\033[1;31mMONERO BASH: debug file missing\n"; exit 1;;
	$hashlistMissing) printf "\033[1;31mMONERO BASH: hashlist file missing\n"; exit 1;;
esac

# DEBUG COMMAND - read /src/debug for more info
if [[ $1 = "DEBUG_04e3be9" ]]; then
	case $2 in
		"") DEBUG_04e3be9 ;;
		*) "$2" ;;
	esac
	exit
fi

# Safety checks
safety_Root
safety::gnu_linux
safety::bash

# No stdin support
if [[ -p /dev/stdin ]]; then
	print_Error_Exit "no stdin/pipe support!"
fi

# Installation
if [[ $FIRST_TIME = "true" ]]; then
	monerobash_Install
	exit
fi

# Even more safety checks
if [[ $FIRST_TIME != "true" ]]; then
	safety_User
	safety_DotMoneroBash
	missing_Wallets
	missing_config_Folder
	missing_config_All
	missing_systemd_All
fi

# Interactive/option check
[[ $1 = "" ]]&& interactive="true"
[[ $1 != "" ]]&& options="true"

# Interactive Wallet Selection
if [[ $interactive = "true" ]]; then
	print_MoneroBashTitle
	if [[ $AUTO_UPDATE = "true" ]]; then
		update_All
		echo
	fi

	# SHOW WALLETS, SELECT
	$white; wallet_Count ; wallet_List
	while true ;do
		$byellow; printf "Select wallet "
		$white; printf "or "
		$bpurple; printf "[new / view / recover]"
		$white; printf ": "
		read walletSelection

		for i in ${walletList[*]}; do
			# IF WALLET NAME COLLIDES WITH OPTION, ASK FOR CLARIFICATION
			if [[ $walletSelection = $i && $walletSelection = "new" \
				|| $walletSelection = $i && $walletSelection = "view" \
				|| $walletSelection = $i && $walletSelection = "recover" ]]; then
					wallet_Collision
			# ELSE, START WALLET NORMALLY IF IT EXISTS
			elif [[ $walletSelection = $i ]]; then
				$white; printf "Password: "
				read -s walletPassword
				printf "\n\n"
				printf "\e[1;93m%s\e[1;97m%s\n" "Starting wallet " "[$walletSelection]";$off
				wallet_Start
			fi
		done

		# WALLET CREATION + ERROR INPUT
		case $walletSelection in
			new|New|NEW|"[new]"|"[New]") wallet_Create ; break ;;
			view|View|VIEW|view-only|View-only|View-Only) wallet_View ; break ;;
			recover|Recover|RECOVER|"[recover]"|"[Recover]") wallet_Recover ; break ;;
			"") print_Error "Empty input" ;;
			*) $ired; print_Error "Wallet does not exist" ;;
		esac
	done
	exit
fi

# Option Flags
if [[ $options = "true" ]]; then
	case $1 in
		backup) backup_Wallets ;;
		decrypt) backup_Decrypt ;;
		uninstall) monerobash_Uninstall ;;
		update) update_All ;;
		version) print_Version ;;
		list) print_MoneroBashTitle && wallet_Count && wallet_List ;;
		size) print_Size ;;
		price) check_Price ;;
		status) status_All ;;
		integrity) CHECK_HASH_LIST ;;
		help) print_Usage ;;
		config) mine_Config ;;
		rpc)
			if [[ $2 != "" ]]; then
				shift
				rpc_Daemon "$@"
			else
				print_rpc_Usage
			fi
			;;
		seed)
			[[ $2 != "" ]]&& seedOptions="true" && seedLanguage="$2"
			seed_Create
			;;
		edit)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero;;
				*"xmr"*) define_XMRig;;
				*"p2p"*) define_P2Pool;;
				*) print_Error_Exit "Pick: <monero/p2pool/xmrig>" ;;
			esac
			systemd_Edit
			;;
		reset)
			case $2 in
				*"bash"*)define_MoneroBash;;
				*"daemon"*|*"monero"*) define_Monero;;
				*"xmr"*) define_XMRig;;
				*"p2p"*) define_P2Pool;;
				*) print_Error_Exit "Pick: <bash/monero/p2pool/xmrig>" ;;
			esac
			reset_Template
			;;
		start)
			shift
			case "$*" in
				*"daemon"*|*"monero"*) define_Monero;;
				*"xmr"*) define_XMRig;;
				*"p2p"*) define_P2Pool;;
				all) mine_Start; exit;;
				*) print_Error_Exit "Pick: <all/monero/p2pool/xmrig>" ;;
			esac
			process_Start
			;;
		stop)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero;;
				*"xmr"*) define_XMRig;;
				*"p2p"*) define_P2Pool;;
				all) mine_Stop; exit;;
				*) print_Error_Exit "Pick: <all/monero/p2pool/xmrig>" ;;
			esac
			process_Stop
			;;
		restart)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero;;
				*"xmr"*) define_XMRig;;
				*"p2p"*) define_P2Pool;;
				all) mine_Restart; exit ;;
				*) print_Error_Exit "Pick: <all/monero/p2pool/xmrig>" ;;
			esac
			process_Restart
			;;
		kill)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero;;
				*"xmr"*) define_XMRig;;
				*"p2p"*) define_P2Pool;;
				all) mine_Kill; exit ;;
				*) print_Error_Exit "Pick: <all/monero/p2pool/xmrig>" ;;
			esac
			process_Kill
			;;
		full)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero;;
				*"xmr"*) define_XMRig;;
				*"p2p"*) define_P2Pool;;
				*) print_Error_Exit "Pick: <monero/xmrig/p2pool>" ;;
			esac
			process_Full
			;;
		watch)
			case $2 in
				*"daemon"*|*"monero"*) watch_Monero ;;
				*"xmr"*) watch_XMRig ;;
				*"p2p"*) watch_P2Pool ;;
				*) print_Error_Exit "Pick: <monero/xmrig/p2pool>" ;;
			esac
			;;
		enable)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero;;
				*"xmr"*) define_XMRig;;
				*"p2p"*) define_P2Pool;;
				all) define_Monero;process_Enable;define_XMRig;process_Enable;define_P2Pool;process_Enable;exit;;
				*) print_Error_Exit "Pick: <all/monero/xmrig/p2pool>" ;;
			esac
			process_Enable
			;;
		disable)
			case $2 in
				*"daemon"*|*"monero"*) define_Monero ;;
				*"xmr"*) define_XMRig ;;
				*"p2p"*) define_P2Pool ;;
				all) define_Monero;process_Disable;define_XMRig;process_Disable;define_P2Pool;process_Disable;exit;;
				*) print_Error_Exit "Pick: <all/monero/xmrig/p2pool>" ;;
			esac
			process_Disable
			;;
		upgrade)
			[[ $* = *"verbose"* ]]&& VERBOSE="true" &&$iblue&& echo "Verbosely upgrading...!" ;$off
			[[ $* = *"force"* ]]&& FORCE_UPGRADE="true" &&$ired&& echo "Forcefully upgrading...!" ;$off
			UPGRADE_LIST=${2//verbose}
			UPGRADE_LIST=${UPGRADE_LIST//force}
			case $UPGRADE_LIST in
				*"bash"*)
					$bwhite; echo -n "Upgrade [monero-bash]? (Y/n) " ;$off
					Yes(){ upgrade_MoneroBash ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*"daemon"*|*"monero"*|*"Monero"*)
					$bwhite; echo -n "Upgrade [Monero]? (Y/n) " ;$off
					Yes(){ upgrade_Monero ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*"xmr"*|*"Xmr"*|*"XMR"*)
					$bwhite; echo -n "Upgrade [XMRig]? (Y/n) " ;$off
					Yes(){ upgrade_XMRig ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*"p2p"*|*"P2P"*|*"P2p"*)
					$bwhite; echo -n "Upgrade [P2Pool]? (Y/n) " ;$off
					Yes(){ upgrade_P2Pool ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				""|all|All|ALL)
					if [[ $FORCE_UPGRADE = "true" ]]; then
						upgrade_Force
					else
						print_Upgrade
						$bwhite; echo -n "Upgrade? (Y/n) " ;$off
						Yes(){ upgrade_All ;}
						No(){ echo "Exiting..." ;exit;}
						prompt_YESno
					fi
					;;
				*)
					print_Error "Pick a package or <all>"
					print_Version
					;;
			esac
			;;
		install)
			[[ $* = *"verbose"* ]]&& VERBOSE="true" &&$iblue&& echo "Verbosely installing...!" ;$off
			case $2 in
				*"bash"*|*"Bash"*|*"BASH"*)
					$bwhite; echo -n "Install [monero-bash]? (Y/n) " ;$off
					Yes(){ echo "install_MoneroBash" ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				monero|Monero|MONERO)
					$bwhite; echo -n "Install [Monero]? (Y/n) " ;$off
					Yes(){ install_Monero ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				xmrig|XMRig|XMRIG|Xmrig|xmr|Xmr)
					$bwhite; echo -n "Install [XMRig]? (Y/n) " ;$off
					Yes(){ install_XMRig ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*"p2p"*|*"P2P"*|*"P2p"*)
					$bwhite; echo -n "Install [P2Pool]? (Y/n) " ;$off
					Yes(){ install_P2Pool ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				all|All|ALL)
					print_Install
					$bwhite; echo -n "Install? (Y/n) " ;$off
					Yes(){ install_All ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*)
					print_Error "Pick a package or <all>"
					print_Version
					;;
			esac
			;;
		remove)
			case $2 in
				*"bash"*|*"Bash"*|*"BASH"*)
					$bwhite; echo -n "Remove [monero-bash]? (Y/n) " ;$off
					Yes(){ remove_MoneroBash ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				monero|Monero|MONERO)
					$bwhite; echo -n "Remove [Monero]? (Y/n) " ;$off
					Yes(){ remove_Monero ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				xmrig|XMRig|XMRIG|Xmrig|xmr|Xmr)
					$bwhite; echo -n "Remove [XMRig]? (Y/n) " ;$off
					Yes(){ remove_XMRig ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*"p2p"*|*"P2P"*|*"P2p"*)
					$bwhite; echo -n "Remove [P2Pool]? (Y/n) " ;$off
					Yes(){ remove_P2Pool ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				all|All|ALL)
					print_Remove
					$bwhite; echo -n "Remove? (Y/n) " ;$off
					Yes(){ remove_All ;}
					No(){ echo "Exiting..." ;exit;}
					prompt_YESno
					;;
				*)
				print_Error "Pick a package or <all>"
				print_Version
				;;
			esac
			;;
		*)
			$bred; echo -n "[monero-bash] "
			$iwhite; echo "Invalid option!"
			$off; echo -n "For help, type: "
			$bcyan; echo "monero-bash help"; $off
	esac
	exit
fi

#!/usr/bin/env bash
#
# debugging tools for monero-bash
# USE VERY CAREFULLY
#

# invoke a monero-bash function directly
DEBUG_04e3be9()
{
	$bred; echo "@@@@@@   DEBUG MODE - BE CAREFUL   @@@@@@"
	$iwhite; echo -n "function to execute: " ;$off
	read command
	"$command"
}

# list all monero-bash functions, variables
LIST()
{
	echo -e "\033[1;32mMONERO-BASH GLOBAL FUNCTIONS:\033[0m"
	declare -F | sed 's/declare -f //g'
	echo -e "\033[1;33mMONERO-BASH GLOBAL VARIABLES:\033[0m"
	cat "src/var" | grep -v "#" | grep -v "\033"
}

# produce a hash list for important monero-bash files /monero-bash/src/txt/hashlist
PRODUCE_HASH_LIST_TEMPLATE()
{
	for i in $DIR/* ;do
		if [[ -f "$i" && "$i" != "src/txt/hashlist" ]]; then
			sudo sha256sum $i >> "$hashlist"
		fi
	done
}
PRODUCE_HASH_LIST()
{
	prompt_Sudo
	echo "Producing hashlist..."
	sudo echo -n > "$hashlist"
	sudo sha256sum "monero-bash" >> "$hashlist"
	local DIR="src"
	PRODUCE_HASH_LIST_TEMPLATE
	local DIR="src/func"
	PRODUCE_HASH_LIST_TEMPLATE
	local DIR="src/txt"
	PRODUCE_HASH_LIST_TEMPLATE
	local DIR="config"
	PRODUCE_HASH_LIST_TEMPLATE
	local DIR="gpg"
	PRODUCE_HASH_LIST_TEMPLATE
}

# check hash list against current monero-bash files (with color coded output)
CHECK_HASH_LIST_TEMPLATE()
{
	for i in $DIR/* ;do
		if [[ -f "$i" && "$i" != "src/txt/hashlist" ]]; then
			grep "$i" "$hashlist" | sha256sum -c &>/dev/null
			if [[ $? = "0" ]]; then
				$bgreen; printf "[  OK  ]"
				$white; echo "$i"
			else
				$bred; printf "[ FAILED]"
				$white; echo "$i"
				hashFail="true"
			fi
		fi
	done
}
CHECK_HASH_LIST()
{
	# monero-bash hash
	grep "monero-bash" "$hashlist" | sha256sum -c &>/dev/null
	if [[ $? = "0" ]]; then
		$bgreen; printf "[  OK  ]"
		$white; echo "monero-bash"
	else
		$bred; printf "[FAILED]"
		$white; echo "monero-bash"
		hashFail="true"
	fi

	# the rest
	local DIR="src"
	CHECK_HASH_LIST_TEMPLATE
	local DIR="src/func"
	CHECK_HASH_LIST_TEMPLATE
	local DIR="src/txt"
	CHECK_HASH_LIST_TEMPLATE
	local DIR="src/config"
	CHECK_HASH_LIST_TEMPLATE
	local DIR="gpg"
	CHECK_HASH_LIST_TEMPLATE

	if [[ $hashFail = "true" ]]; then
		$bred; echo -n "monero-bash error: "
		$bwhite; echo "hash check has failed"
		$white; echo "Exiting for safety..."
		exit 1
	else
		$bwhite; echo -n "monero-bash: "
		$bgreen; echo "hash check success!" ;$off
	fi
}

# checks the hash list less verbosely
QUIET_HASH_LIST_TEMPLATE()
{
	for i in $DIR/* ;do
		if [[ -f "$i" && "$i" != "src/txt/hashlist" ]]; then
			grep "$i" "$hashlist" | sha256sum -c &>/dev/null
			[[ $? != "0" ]]&& hashFail="true" && local localHashFail="true"
		fi
	done
	if [[ $localHashFail = "true" ]]; then
		$bred; printf "[FAILED]"
		$white; echo "$NAME"
	else
		$bgreen; printf "[  OK  ]"
		$white; echo "$NAME"
	fi
}
QUIET_HASH_LIST()
{
	# monero-bash hash
	grep "monero-bash" "$hashlist" | sha256sum -c &>/dev/null
	if [[ $? = "0" ]]; then
		$bgreen; printf "[  OK  ]"
		$white; echo "monero-bash"
	else
		$bred; printf "[FAILED]"
		$white; echo "monero-bash"
		hashFail="true"
	fi

	# the rest
	local NAME="source"
	local DIR="src"
	QUIET_HASH_LIST_TEMPLATE
	local NAME="functions"
	local DIR="src/func"
	QUIET_HASH_LIST_TEMPLATE
	local NAME="txt"
	local DIR="src/txt"
	QUIET_HASH_LIST_TEMPLATE
	local NAME="config"
	local DIR="config"
	QUIET_HASH_LIST_TEMPLATE
	local NAME="gpg"
	local DIR="gpg"
	QUIET_HASH_LIST_TEMPLATE

	if [[ $hashFail = "true" ]]; then
		$bred; echo -n "monero-bash error: "
		$bwhite; echo "hash check has failed"
		$white; echo "Exiting for safety..."
		exit 1
	else
		$bwhite; echo -n "monero-bash: "
		$bgreen; echo "hash check success!" ;$off
	fi
}

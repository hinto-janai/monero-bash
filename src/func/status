#!/usr/bin/env bash
# status function, prints multiple helpful stats

status_All()
{
	print_MoneroBashTitle
	print_Version
	echo
	status_System
	[[ $MONERO_VER != "" ]]&& status_Monero
	[[ $P2POOL_VER != "" ]]&& status_P2Pool
	[[ $XMRIG_VER != "" ]]&& status_XMRig
}

status_System()
{
	$bwhite; printf "System: "
	$bgreen; echo "$(uptime -p)"
	echo
}

status_Template()
{
	$bwhite; echo -n "$NAME_PRETTY: " ;$off
	if pgrep $DIRECTORY/$PROCESS -f &>/dev/null ;then
		$bgreen; echo "online" ;$off

		# ps stats
		ps -o "| %p | %C | %t |" -p $(pgrep $DIRECTORY/$PROCESS -f)

		# process specific stats
		EXTRA_STATS
	else
		$bred; echo "offline" ;$off
	fi
}

status_Monero()
{
	define_Monero
	EXTRA_STATS(){ $binMonero/monerod status ;echo;}
	status_Template
}

status_P2Pool()
{
	define_P2Pool
	EXTRA_STATS()
	{
		$iwhite; echo -n "Wallet: "
		$white; echo "$WALLET"

		# SHARE OUTPUT VARIABLE
		local shareOutput="$(grep "SHARE FOUND" $DIRECTORY/p2pool.log)"

		# SHARES PER HOUR
		if [[ $shareOutput = "" ]]; then
			local sharesFound="0"
		else
			local sharesFound="$(echo "$shareOutput" | wc -l)"
		fi
		local processUnixTime="$(ps -p $(pgrep $DIRECTORY/$PROCESS -f) -o etimes=)"
		local processHours="$(($processUnixTime / 60 / 60))"
		[[ $processHours = 0 ]] && processHours="1"

		# SHARES PER DAY (not floating, 47 hours = 1 day)
		if [[ $processHours -lt 24 ]]; then
			local processDays="1"
		else
			local processDays="$(($processHours / 24))"
		fi

		# SHARES/hour & SHARES/day WITH FLOATING POINT
		local sharesPerHour="$(printf %.2f\\n "$((1000000000 * $sharesFound / $processHours ))e-9")"
		local sharesPerDay="$(printf %.2f\\n "$((1000000000 * $sharesFound / $processDays ))e-9")"

		$igreen; printf "Shares found: "
		$bwhite; printf "$sharesFound "
		echo "($sharesPerHour per hour / $sharesPerDay per day)"

		# LATEST SHARE (stupid amount of sed and pipes, thankfully the output is in memory so it's pretty fast)
		local latestShare="$(echo "$shareOutput" | tail -1 | sed 's/NOTICE .\|Stratum.*: //g' | sed 's/, diff .*, c/ c/' | sed 's/user.*, //')"
		$iblue; printf "Latest share: "
		$white; echo "$latestShare"
		echo
	}
	status_Template
}

status_XMRig()
{
	define_XMRig
	EXTRA_STATS()
	{
		$iwhite; echo -n "Wallet: " ;$off
		grep -m1 "\"user\":" "$xmrigConf" | awk '{print $2}' | tr -d '","'
		$iblue; echo -n "Pool: " ;$off
		grep -m1 "\"url\":" "$xmrigConf" | awk '{print $2}' | tr -d '","'

		# SHARES + HASHRATE
		$igreen; echo -n "Accepted shares: " ;$white
		if tac "$binXMRig/xmrig-log" | grep -m1 "accepted" &>/dev/null ;then
			tac "$binXMRig/xmrig-log" | grep -m1 "accepted" | sed "s/].*cpu.*a/] a/"
		else
			echo
		fi
		$ired; echo -n "Hashrate: " ;$white
		tac "$binXMRig/xmrig-log" | grep -m1 "speed" | sed "s/].*miner.*speed/] speed/"
		echo
	}
	status_Template
}

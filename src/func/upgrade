#!/usr/bin/env bash
#
# order of operations:
# 1. upgrade_Pre
# 2. Download, Verify, Extract, Replace
# 3. Edit the local state file
# 4. Recreate the local hashlist
# 5. upgrade_Post
#
# there are messages/checks mixed in between
# all the steps, which makes it a bit confusing.
# to add to the un-readability, monero-bash updating itself
# is a special case, so there is also an if/then that handles that
#
# other than that, the functions that make up "upgrade_Template"
# should be self-evident

upgrade_Pre()
{
	# v1 END OF LIFE FOR MONERO-BASH
	if [[ $NAME_PRETTY = monero-bash ]]; then
		version_Template
		if [[ $NewVer != v1* ]]; then
			___END___OF___LIFE___
			exit 99
		fi
	fi

	# CHECK IF ALREADY INSTALLED/UP TO DATE
	if [[ -z $NAME_VER && $INSTALL != true ]]; then
		$white; echo -n "$NAME_PRETTY: "
		$ired; echo "is not installed"
	elif [[ $NAME_OLD != true && $FORCE_UPGRADE != true ]]; then
		$white; echo -n "$NAME_PRETTY: "
		$bgreen; echo "up to date" ;$off
	else

		# ELSE, START UPGRADE
		prompt_Sudo ; error_Sudo
		echo ; safety_HashList
		trap "trap_Tmp" 1 2 3 6
		tmp_Create ; error_Exit "Could not create tmp folder"
		upgrade_Template
	fi
}

upgrade_Template()
{
	# DOWNLOAD
	print_GreenHash "Downloading [$NAME_PRETTY]"
	download_Template

	# VERIFY
	print_WhiteHash "Verifying"
	verify_Template

	# EXTRACT
	print_WhiteHash "Extracting"
	tar -xf "$tmp/$tarFile" -C "$tmp"
	code_Tar
	rm -f "$tmp/$tarFile"
	error_Exit "rm - error"
	$white; echo -n "$NAME_PRETTY: "
	$igreen; echo "EXTRACTED" ;$off

	# TEMP FOLDER FOR OLD PACKAGE
	folderName="$(ls $tmp)"
	if [[ -d $old ]]; then
		sudo -u "$USER" rm -rf "$old"
		error_Exit "Could not remove old folder"
	fi

	# SAFETY CHECKS
	[[ -z $folderName || -z $tmp ]] && echo "EMPTY TMP VARIABLE, EXITING FOR SAFETY" && exit 1
	mkdir -p "$old"

	# INSTALL FOR MONERO_BASH
	if [[ $NAME_CAPS = MONERO_BASH ]]; then
		trap "trap_Old" 1 2 3 6 15
		sudo -u "$USER" cp "$installDirectory/monero-bash" "$old"
		sudo -u "$USER" cp -fr "$installDirectory/src" "$old"
		sudo -u "$USER" cp -fr "$installDirectory/config" "$old"
		sudo -u "$USER" cp -fr "$installDirectory/gpg" "$old"
		trap "trap_MoneroBash" 1 2 3 6 15
		sudo -u "$USER" cp -fr "$tmp/$folderName/monero-bash" "$installDirectory"
		sudo -u "$USER" cp -fr "$tmp/$folderName/src" "$installDirectory"
		sudo -u "$USER" cp -fr "$tmp/$folderName/config" "$installDirectory"
		sudo -u "$USER" cp -fr "$tmp/$folderName/gpg" "$installDirectory"
		sudo -u "$USER" cp -fr "$old/src/txt/state" "$state"
	else

	# INSTALL FOR EVERYTHING ELSE
		trap "trap_No" 1 2 3 6 15
		if [[ -d $DIRECTORY ]]; then
			sudo -u "$USER" mv -f "$DIRECTORY" "$old"
		fi
		if [[ -d $DIRECTORY && $trapSet = true ]]; then
			error_Trap "RESTORING OLD [$NAME_PRETTY]"
			sudo -u "$USER" mv -f "$old/$FOLDER" "$DIRECTORY"
			exit
		fi
		sudo -u "$USER" mkdir -p "$DIRECTORY"
		sudo -u "$USER" mv "$tmp/$folderName"/* "$DIRECTORY"

		# KEEP OLD P2POOL CACHE/PEERS/LOG
		if [[ $NAME_PRETTY = P2Pool ]]; then
			[[ -f "$old/$FOLDER/p2pool.cache" ]] && mv -f "$old/$FOLDER/p2pool.cache" "$DIRECTORY"
			[[ -f "$old/$FOLDER/p2pool_peers.txt" ]] && mv -f "$old/$FOLDER/p2pool_peers.txt" "$DIRECTORY"
			[[ -f "$old/$FOLDER/p2pool.log" ]] && mv -f "$old/$FOLDER/p2pool.log" "$DIRECTORY"
		fi
		if [[ -d $DIRECTORY && $trapSet = true ]]; then
			error_Trap "RESTORING OLD [$NAME_PRETTY]"
			sudo -u "$USER" rm -fr "$DIRECTORY"
			sudo -u "$USER" mv -f "$old/$FOLDER" "$DIRECTORY"
			exit
		fi
	fi
	upgrade_Post
}

upgrade_Post()
{
	trap "trap_Post" 1 2 3 6 15
	sudo -u "$USER" rm -rf "$old"

	# STATE UPDATE
	print_WhiteHash "Updating local state"
	version_Template
	sudo -u "$USER" sed -i "s@.*"$NAME_CAPS"_VER=.*@"$NAME_CAPS"_VER=\""$NewVer"\"@" "$state"
	sudo -u "$USER" sed -i "s@.*"$NAME_CAPS"_OLD=.*@"$NAME_CAPS"_OLD=\"false\"@" "$state"
	$white; echo -n "$NewVer: " ;$igreen; echo "VERSION" ;$off
	[[ $INSTALL = true ]]&& systemd_"$NAME_FUNC"
	PRODUCE_HASH_LIST
	sudo chown -R "$USER:$USER" "$installDirectory"

	# CLEANUP, FINAL MESSAGE
	tmp_Del
	error_Exit "Could not cleanup tmp folder"
	if [[ $INSTALL = true ]]; then
		print_GreenHash "Installed [$NAME_PRETTY]"
	else
		print_GreenHash "Upgraded [$NAME_PRETTY]"
	fi
	[[ $VERBOSE = true ]]&& verbose_Upgrade
}

upgrade_Monero()
{
	local downloadMonero="true"
	define_Monero
	prompt_Sudo;error_Sudo
	upgrade_Pre
	local downloadMonero="false"
}

upgrade_MoneroBash()
{
	define_MoneroBash
	prompt_Sudo;error_Sudo
	upgrade_Pre
}

upgrade_XMRig()
{
	local downloadXMRig="true"
	define_XMRig
	prompt_Sudo;error_Sudo
	upgrade_Pre
	local downloadXMRig="false"
}

upgrade_P2Pool()
{
	local downloadP2Pool="true"
	define_P2Pool
	prompt_Sudo;error_Sudo
	upgrade_Pre
	local downloadP2Pool="false"
}

upgrade_All()
{
	[[ $MONERO_BASH_VER != "" && $MONERO_BASH_OLD = "true" ]]&& upgrade_MoneroBash
	[[ $MONERO_VER != "" && $MONERO_OLD = "true" ]]&& upgrade_Monero
	[[ $XMRIG_VER != "" && $XMRIG_OLD = "true" ]]&& upgrade_XMRig
	[[ $P2POOL_VER != "" && $P2POOL_OLD = "true" ]]&& upgrade_P2Pool
}

upgrade_Force()
{
	$bwhite; printf "Packages to upgrade: " ;$off
	[[ $MONERO_BASH_VER != "" ]]&& printf " [monero-bash] "
	[[ $MONERO_VER != "" ]]&& printf " [Monero] "
	[[ $XMRIG_VER != "" ]]&& printf " [XMRig] "
	[[ $P2POOL_VER != "" ]]&& printf " [P2Pool] "
	echo;echo
	$bwhite; echo -n "Upgrade? (Y/n) " ;$off
	Yes()
	{
		[[ $MONERO_BASH_VER != "" ]]&& upgrade_MoneroBash
		[[ $MONERO_VER != "" ]]&& upgrade_Monero
		[[ $XMRIG_VER != "" ]]&& upgrade_XMRig
		[[ $P2POOL_VER != "" ]]&& upgrade_P2Pool
	}
	No(){ echo "Exiting..." ;exit;}
	prompt_YESno
}
